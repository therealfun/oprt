#!/bin/bash

. ${BASH_SOURCE%/*}/oprt_lib

main() {
	(( $# == 0 ))            \
		|| (( $# == 2 )) \
		|| lib_fatal_errorf '%s' "two arguments are required, or none"

	remove_old_source_files "${1:-default}"
	remove_old_packages     "${2:-default}"
}

remove_old_source_files() {
	local _SRC_DIR=$1

	[[ $_SRC_DIR == default ]] && {
		_SRC_DIR=$(. /etc/pkgmk.conf; echo $PKGMK_SOURCE_DIR)
		[[ $_SRC_DIR == "" || $_SRC_DIR == $PWD ]] \
			&& return
	}

	[[ $_SRC_DIR == none ]] \
		&& return

	echo "Remove old sources..."

	declare -A _USED
	local _PORT _INSTALLED
	readarray -t _INSTALLED < <( pkginfo --installed | awk '{print $1}' )

	for _PORT in "${_INSTALLED[@]}"; do
		local _SRC _SOURCES
		readarray -t _SOURCES < <( get_remote_sources "$_PORT" )

		for _SRC in "${_SOURCES[@]}"; do
			_USED["$_SRC"]=1
		done
	done

	remove_unused_old_files_from_dir "$_SRC_DIR" 30
}

get_remote_sources() {
	local _PORT=$1

	lib_set_PORT_DIR_and_COLLECTIONS "$_PORT"

	. "$_PORT_DIR/Pkgfile"

	local _SRC
	local _REMOTE_FILE="^(http|https|ftp|file)://.*/(.+)"
	local _DUMB_FILE="^v?[0-9]"
	for _SRC in "${source[@]}"; do
		[[ $_SRC =~ $_REMOTE_FILE ]] || continue

		local _FILE=${BASH_REMATCH[2]}
		                               printf '%s\n'        "$_FILE"
		[[ $_FILE =~ $_DUMB_FILE ]] && printf '%s\n' "$_PORT-$_FILE"
	done
}

remove_unused_old_files_from_dir() {
	local _DIR=$1
	local _DAYS=$2

	local _FILE
	for _FILE in $_DIR/*; do
		[[ -f $_FILE ]] \
			|| continue

		[[ ${_USED["${_FILE##*/}"]+defined} ]] \
			&& continue

		is_newer_than_n_days "$_FILE" $_DAYS \
			|| ( set -x; lib_run_cmd rm -- "$_FILE" )
	done
}

remove_old_packages() {
	local _PKG_DIR=$1

	[[ $_PKG_DIR == default ]] && {
		_PKG_DIR=$(. /etc/pkgmk.conf; echo $PKGMK_PACKAGE_DIR)
		[[ $_PKG_DIR == "" || $_PKG_DIR == $PWD ]] \
			&& return
	}

	[[ $_PKG_DIR == none ]] \
		&& return

	echo "Remove old packages..."

	local _PORT _FILE

	declare -A _INSTALLED
	while read -r _PORT _; do
		_INSTALLED["$_PORT"]=1
	done < <( pkginfo --installed )

	declare -A _SEEN
	for _FILE in $_PKG_DIR/*\#*; do
		[[ -e $_FILE ]] || continue

		_PORT=${_FILE##*/}
		_PORT=${_PORT%%\#*}

		_SEEN["$_PORT"]=1
	done

	declare -A _USED
	for _PORT in "${!_SEEN[@]}"; do
		return_port_packages_sorted "$_PORT"
		local _KEEP=()
		if [[ ${_INSTALLED["$_PORT"]+defined} ]]; then
			_KEEP=( ${return[@]:0:3} )
		else
			[[ $return[0] != "" ]] \
				&& is_newer_than_an_year "$_PKG_DIR/${return[0]}" \
				&& _KEEP=( ${return[0]} )
		fi
		for _FILE in "${_KEEP[@]}"; do
			# Keeping the .sig files too
			local _F
			for _F in $_PKG_DIR/${_FILE}*; do
				[[ -e "$_F" ]] && _USED["${_F##*/}"]=1
			done
		done
	done

	remove_unused_old_files_from_dir "$_PKG_DIR" 30
}

return_port_packages_sorted() {
	return=()
	local _TIME _FILE
	while read -r _TIME _FILE; do
		return+=( "${_FILE##*/}" )
	done < <(
		find "$_PKG_DIR"                                \
			-maxdepth 1                             \
			-name "${_PORT}#*[.]pkg[.]tar[.][^.]*"  \
			-printf '%T@ %p\n'                      \
		| sort -nr
	)
}

is_newer_than_an_year() {
	is_newer_than_n_days "$1" 365
}

is_newer_than_n_days() {
	local _FILE=$1
	local _DAYS=$2

	local _NOW="$(date +%s)"
	local _LIMIT=$(( $_NOW - $_DAYS * 24 * 60 * 60 ))

	# Using change time (%Z) instead of modification time (%Y)
	# because wget creates files with the original modification time

	local _TIME="$(stat --format='%Z' "$_FILE")"

	(( $_TIME > $_LIMIT ))
}

main "$@"
