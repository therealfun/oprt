#!/bin/bash

libdir=${BASH_SOURCE%/*}
. $libdir/oprt_lib

declare -A args
declare -A exclude
to_update=()

main() {
	parse_args "$@"

	(( ${#args[@]} > 0 )) \
		|| add_todo_from_oprt_diff

	select_what_to_update

	local _FAILED=()

	install_missing_dependencies
	update_selected_ports
	rebuild_broken_ports

	lib_is_shell_interactive && {
		printf 'Last log entries: %s\n' "$OPRT_DIR/log"
		tail "$OPRT_DIR/log" | tac

		[[ ${OPRT_DONT_ASK_SCRIPT+defined} ]] || {
			ask_later_script_questions
		}
		[[ ${OPRT_DONT_LOG+defined} ]] || {
			ask_about_failed_build_logs
			ask_about_successful_build_logs
		}

		lib_run_rejmerge
	}

	(( ${#_FAILED[@]} == 0 )) || {
		lib_warningf 'Failed: %s' "${_FAILED[@]}"
		exit 1
	}
}
	
parse_args() {
	local _PORT
	for _PORT; do
		if [[ $_PORT = -* ]]; then
			_PORT=${_PORT#-}
			exclude["${_PORT##*/}"]=1
		else
			args["$_PORT"]=1
		fi
	done
}


add_todo_from_oprt_diff() {
	local _PORT _INSTALLED _LATEST

	while read _PORT _INSTALLED _ _LATEST _; do
		[[ $_LATEST == unknown ]] && {
			lib_warningf 'Port "%s" (%s) cannot be found in any collection.' "$_PORT" "$_INSTALLED"
			continue
		}
		args["$_PORT"]=1
	done < <( $libdir/oprt-diff )
}

select_what_to_update() {
	local _PORT _PORT_DIR
	for _PORT in "${!args[@]}"; do
		[[ ${exclude["$_PORT"]+defined} ]] && continue

		lib_set_PORT_DIR_and_COLLECTIONS "$_PORT"
		lib_ask_about_install_scripts "$_PORT_DIR"
		to_update+=( "$_PORT_DIR" )
	done
}

install_missing_dependencies() {
	local _PORT
	local _TO_INSTALL=()

	for _PORT in "${to_update[@]}"; do
		local _DEPS=() _DEP
		read -r -a _DEPS < <( $libdir/oprt-pkgfile-deps "$_PORT" )
		for _DEP in "${_DEPS[@]}"; do
			local _PORT_DIR _COLLECTIONS
			lib_is_installed "$_DEP" || {
				lib_set_PORT_DIR_and_COLLECTIONS "$_DEP"
				lib_ask_about_install_scripts    "$_PORT_DIR"
				_TO_INSTALL+=( "$_PORT_DIR" )
			}
		done

	done

	for _PORT in "${_TO_INSTALL[@]}"; do
		$libdir/oprt-depinst "$_PORT"   \
			|| _FAILED+=( "$_PORT" )
	done
}

update_selected_ports() {
	local _PORT_DIR

	for _PORT_DIR in "${to_update[@]}"; do
		(
			export OPRT_INSTALL_REASON=update
			export OPRT_DONT_ASK_SCRIPT=1
			$libdir/oprt-install "$_PORT_DIR"
		) || _FAILED+=( "$_PORT_DIR" )
	done
}

rebuild_broken_ports() {
	lib_return_full_revdep
	local _BROKEN=( ${return[@]} );
	(( ${#_BROKEN[@]} > 0 )) || return

	lib_warningf 'Broken port: %s' "${_BROKEN[@]}"

	local _PORT _STILL=()
	for _PORT in "${_BROKEN[@]}"; do
		if   [[ ${exclude["$_PORT"]+defined} ]]
		then
			_STILL+=( "$_PORT" )
		elif ! rebuild_one_broken_port "$_PORT"
		then
			_FAILED+=( "$_PORT" )
		fi
	done

	(( ${#_STILL[@]} == 0 )) \
		|| lib_warningf 'Still broken: %s' "${_STILL[@]}"
}

rebuild_one_broken_port() ( # sub-shell function
	local _PORT=$1 _PORT_DIR

	lib_set_PORT_DIR_and_COLLECTIONS "$_PORT"

	export OPRT_INSTALL_REASON=rebuild
	export OPRT_DONT_ASK_SCRIPT=1

	if      already_rebuilt        "$_PORT" "$_PORT_DIR"
	then
		$libdir/oprt-install   "$_PORT"
	else
		$libdir/oprt-reinstall "$_PORT"
	fi

	rc=$?
	(( $rc == 0 )) \
		&& remember_this_build "$_PORT" "$_PORT_DIR"
	return $rc
)

already_rebuilt() {
	local     _PORT=$1
	local _PORT_DIR=$2

	local _MEMO="$OPRT_DIR/$_PORT.rebuilt"

	[[ -e "$_MEMO" ]]                    \
		&& lib_find_pkg "$_PORT_DIR" \
		&& (( $(stat --format='%Y' "$pkg") == $(cat "$_MEMO") ))
}

remember_this_build() {
	local     _PORT=$1
	local _PORT_DIR=$2

	local _MEMO="$OPRT_DIR/$_PORT.rebuilt"

	[[ -f "$_MEMO" ]] \
		&& rm "$_MEMO"

	lib_find_pkg "$_PORT_DIR" \
		&& stat --format='%Y' "$pkg" > "$_MEMO"
}

ask_later_script_questions() {
	local _FILE

	for _FILE in $OPRT_DIR/*.later
	do
		[[ -e $_FILE ]] || continue

		local _F=${_FILE##*/}
		      _F=${_F%.later}

		local   _PORT=${_F%.*}
		local _SCRIPT=${_F#$_PORT}

		lib_return_prev_script_answer "$_PORT" "$_SCRIPT"
		[[ $return == unknown ]] || continue

		local _PORT_DIR
		lib_set_PORT_DIR_and_COLLECTIONS "$_PORT"

		lib_return_ask_script_question "$_PORT_DIR" "$_SCRIPT"
		case $return in
			run)
				lib_save_script_question run "$_PORT" "$_SCRIPT"
				rm -- "$_FILE"
				(
					export OPRT_DONT_ASK_SCRIPT=1
					lib_run_port_script "$_PORT_DIR" "$_SCRIPT"
				)
				;;
			ignore)
				lib_save_script_question ignore "$_PORT" "$_SCRIPT"
				rm -- "$_FILE"
				;;
		esac
	done
}

ask_about_failed_build_logs() {
	local _FILE
	for _FILE in $OPRT_DIR/*.build.log.failed; do
		[[ -e $_FILE ]] || continue
		PS3="Delete  '$_FILE' ? "
		select return in delete show keep
		do
			case $return in
				d*) rm  "$_FILE"; break ;;
				s*) cat "$_FILE"        ;;
				k*)               break ;;
			esac
		done
	done
}

ask_about_successful_build_logs() {
	local _FILES=( $OPRT_DIR/*.build.log )

	[[ ${#_FILES[@]} -gt 0 && -f "${_FILES[0]}" ]] \
		|| return

	local _NAMES=( "${_FILES[@]##*/}" )
	local _PORTS=( "${_NAMES[@]%.build.log}" )

	printf 'You have logs from successful builds: %s\n' "${_PORTS[*]}"
	read -p "Remove all these logs? [Y/n] "
	[[ $REPLY == "" || $REPLY == [Yy]* ]] && {
		rm "${_FILES[@]}"
		return
	}

	echo "Then, you can confirm for each one"
	rm --interactive "${_FILES[@]}"
}

main "$@"
