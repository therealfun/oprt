=pod

=head1 NAME

oprt-watch - better alternative to C<ck4up>

=head1 SYNOPSIS

oprt-watch [port...]

B<oprt-watch> checks for upstream source updates, by comparing the I<version> from the F<Pkgfile> with the output of the F<.watch> script from the port directory.

I<port> can be a port name, a port directory, or missing (and the current directory will be used).

=head1 DESCRIPTION

Why is this tool more useful than C<ck4up>?

=over 4

=item B<stateless>

B<oprt-watch> B<always> shows if the current port needs a source update, as opposed to B<ck4up>, which shows B<only once> if the watched B<webpage has been modified>.

=item B<noiseless>

B<oprt-watch> shows only the source version, while B<ck4up> shows all the archive changes from the watched webpage.

=item B<faster>

B<oprt-watch> checks ports in parallel, and doesn't need to fetch to whole page.

=item B<distributed>

B<oprt-watch> shows the same thing regardless the current machine. Anybody can easily check if the port is up to date, because the I<watching howto> is present within the port.

=item B<flexible>

You can watch ftp directories for projects that don't tag releases, don't publish the release fixes on a webpage, but make ftp archives (eg. https://download.gnome.org/sources/gmime/).

You can watch release fixes for projects that don't announce them or keep them for several versions ordered by date (eg. https://github.com/erlang/otp/releases).

=item B<watch multiple sources for the same port>

The output of an B<.watch> script is one or more lines containing a
version number, optionally followed by a variable name from B<Pkgfile>
(default is B<version>). This is usefull when you watch ports having components that must match (eg. when using heavy patches against linux kernel which may not work with the latest stable version).

=back

=head1 ENVIRONMENT

=over 4

=item B<OPRT_WATCH_PROCESSES> (default: 5)

The number of ports checked in the same time.

=back

=head1 SEE ALSO

ck4up(1)

=cut
